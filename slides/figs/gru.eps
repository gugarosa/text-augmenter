%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 631.000000 276.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.5 (Build 19F101) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 631 276
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 631 276
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AvenirNext-Regular
%!FontType1-1.0: AvenirNext-Regular 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /AvenirNext-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /y put
dup 34 /space put
dup 35 /h put
dup 36 /x put
dup 37 /ellipsis put
dup 38 /t put
dup 39 /hyphen put
dup 40 /one put
dup 41 /plus put
dup 42 /C put
dup 43 /eacute put
dup 44 /l put
dup 45 /u put
dup 46 /a put
dup 47 /G put
dup 48 /R put
dup 49 /U put
dup 50 /X put
dup 51 /z put
dup 52 /n put
dup 53 /u03C3 put
dup 54 /r put
dup 55 /asciitilde put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -394 1 index div -411 2 index div 1309 3 index div 1192 5 -1 roll div]cvx def
/sfnts [<




1BB9000E00053E59B8001A10B900000001F4B8000E10B900070001F4411B0007000700170007002700070037000700470007005700070067000700770007008700070097000700A7000700B7000700C70007000D5D410500D6000700E6000700025DBA000A000E0016111239B8000010B80014D0B80015D03031012311141E0233323637170E0123222E02351123353335331533012D840A131A0F0E1F0E03122717132A241761614484019BFEEF1A22130708073B07070A1C3027012439848400010056FFF401EF01D4001D00C7B8001E2FB800172FB80000D0B800002FB8001710B80003D0B800032FB8001710B9001A0004F4BA00040017001A111239B8001E10B8000AD0B8000A2FB9000D0004F4B8001A10B8001DD0B8001D2FB8001A10B8001FDC00B800004558B800002F1BB9000000053E59B800004558B800072F1BB9000700053E59B900120001F4411B0007001200170012002700120037001200470012005700120067001200770012008700120097001200A7001200B7001200C70012000D5D410500D6001200E6001200025D3031212E0135230E0123222635113311141E0233323E023D01331114161701AE020202145A325959440C1D31251B332818440202132E0F29336A57011FFEFD253C2B18162D452FF0FE93133C1800010010000001D401D4000B002500B800004558B800072F1BB9000700053E59B800004558B8000A2F1BB9000A00053E593031372733173733071723270723C8AD57808052AABA588B8F52F2E2B2B2DFF5C3C30000010010FF1001D801D40012007500B800004558B800072F1BB9000700073E59B800004558B800092F1BB9000900073E59B8000710B9000C0002F4411B0007000C0017000C0027000C0037000C0047000C0057000C0067000C0077000C0087000C0097000C00A7000C00B7000C00C7000C000D5D410500D6000C00E6000C00025D303137331333030E0123222737163332363F010333FB02914AE915413D1F1E07181A23280F26C84C49018BFDB33641063E082B286201D30001001F0000019B01D40009003500B800004558B800082F1BB9000800093E59B800004558B800032F1BB9000300053E59B900010001F4B8000810B900060001F43031090121152135012135210191FEE80122FE840117FEF7016401A4FE973B30016B390001005900EB0241017300230027BA0000001300032B00B8000A2FB800132FBB001E0002000500042BBB00180002000D00042B3031010E0323222E02272E0123220E0207273E03333216171E0133323E023702410A1B2229180E191A1C121F2E1A111E1812072A0B1B2129181C331F1D3218111E181307014810211B1103080E0B14140E151A0C2810211B110F1413160E161A0B00030038FFF4020402C400080027002B014CB8002C2FB800002FB800


00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/space 1 def
/plus 2 def
/hyphen 3 def
/one 4 def
/C 5 def
/G 6 def
/R 7 def
/U 8 def
/X 9 def
/a 10 def
/h 11 def
/l 12 def
/n 13 def
/r 14 def
/t 15 def
/u 16 def
/x 17 def
/y 18 def
/z 19 def
/asciitilde 20 def
/eacute 21 def
/ellipsis 22 def
/u03C3 23 def
/u0459 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-394 -411 1309 1192} readonly def
/UniqueID 4446589 def
currentdict end
currentfile eexec




7480679F0908473A8C08E13E40C85D69252088875B9D5B80878ADACCCF4BD8FDE341F7E126EFCE9A44906CC2CA827F34B632543B5AC7A45546FEC809A95B96AAB74772F667546195234B118F4B0C51218C28F7E4C502C9EF64A4AD516E735DA0222923FA5180FB9A389BEA31F2CBC43AB5819732E0D65B0F6E09EDBD3CE668AEA3E9A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/AvenirNext-Regular cguidfix
/F1.1/AvenirNext-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 0.75 sc
q
0 0 631 276 rc
135.42764 267.05264 m
145.1908 257.28955 145.1908 241.46045 135.42764 231.69736 c
125.66455 221.9342 109.83545 221.9342 100.07235 231.69736 c
90.309196 241.46045 90.309196 257.28955 100.07235 267.05264 c
109.83545 276.8158 125.66455 276.8158 135.42764 267.05264 c
f
1 J
1 j
0.60000002 i
0.57380742 0.56553578 0 sc
1 0 0 -1 -358 412 cm
493.42764 144.94736 m
503.1908 154.71045 503.1908 170.53955 493.42764 180.30264 c
483.66455 190.0658 467.83545 190.0658 458.07236 180.30264 c
448.3092 170.53955 448.3092 154.71045 458.07236 144.94736 c
467.83545 135.1842 483.66455 135.1842 493.42764 144.94736 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
466.75 167.625 m
(!)s
/Cs1 SC
0.75 1 0.75 sc
CM
76.75 163.875 m
158.75 163.875 l
163.72057 163.875 167.75 159.84557 167.75 154.875 c
167.75 122.875 l
167.75 117.90443 163.72057 113.875 158.75 113.875 c
76.75 113.875 l
71.779434 113.875 67.75 117.90443 67.75 122.875 c
67.75 154.875 l
67.75 159.84557 71.779434 163.875 76.75 163.875 c
h
76.75 163.875 m
f
0.60000002 i
0.13725491 0.36862746 0 sc
1 0 0 -1 -358 412 cm
434.75 248.125 m
516.75 248.125 l
521.72058 248.125 525.75 252.15443 525.75 257.125 c
525.75 289.125 l
525.75 294.09555 521.72058 298.125 516.75 298.125 c
434.75 298.125 l
429.77945 298.125 425.75 294.09555 425.75 289.125 c
425.75 257.125 l
425.75 252.15443 429.77945 248.125 434.75 248.125 c
h
434.75 248.125 m
S
/Cs2 SC
0 sc
0 i
442.75 278.125 m
(""""""#)[ 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 0.000000 ] xS
/Cs1 SC
1 0.75 0.75 sc
CM
135.42764 43.98122 m
145.1908 34.218121 145.1908 18.389021 135.42764 8.6259212 c
125.66455 -1.1372286 109.83545 -1.1372286 100.07235 8.6259212 c
90.309196 18.389021 90.309196 34.218121 100.07235 43.98122 c
109.83545 53.744373 125.66455 53.744373 135.42764 43.98122 c
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -358 412 cm
493.42764 368.01877 m
503.1908 377.78189 503.1908 393.61099 493.42764 403.37408 c
483.66455 413.13724 467.83545 413.13724 458.07236 403.37408 c
448.3092 393.61099 448.3092 377.78189 458.07236 368.01877 c
467.83545 358.25562 483.66455 358.25562 493.42764 368.01877 c
S
/Cs2 SC
0 sc
0 i
466.75 390.69644 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
475.75 360.69641 m
475.75 308.02499 l
S
0 i
CM
117.75 111.975 m
114.75 103.975 l
120.75 103.975 l
h
117.75 111.975 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
475.75 300.02499 m
472.75 308.02499 l
478.75 308.02499 l
h
475.75 300.02499 m
S
1 J
1 j
0.60000002 i
475.75 248.125 m
475.75 197.52501 l
S
0 i
CM
117.75 222.47499 m
114.75 214.47499 l
120.75 214.47499 l
h
117.75 222.47499 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
475.75 189.52501 m
472.75 197.52501 l
478.75 197.52501 l
h
475.75 189.52501 m
S
/Cs2 SC
0 sc
363.5 274 m
(%)s
967.75 273.78571 m
(%)s
/F1.1[ 10 0 0 -10 0 0]sf
476.66501 173.625 m
(&'\()[ 3.170000 3.200000 0.000000 ] xS
476.86502 284.375 m
(&'\()[ 3.170000 3.200000 0.000000 ] xS
476.66501 396.125 m
(&'\()[ 3.170000 3.200000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
931.5 272.66071 m
948.84998 272.66071 l
S
0 i
CM
598.84998 139.33928 m
590.84998 142.33928 l
590.84998 136.33928 l
h
598.84998 139.33928 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
956.84998 272.66071 m
948.84998 269.66071 l
948.84998 275.66071 l
h
956.84998 272.66071 m
S
1 1 0.75 sc
CM
530.92767 267.55264 m
540.6908 257.78955 540.6908 241.96045 530.92767 232.19736 c
521.16455 222.4342 505.33545 222.4342 495.57236 232.19736 c
485.8092 241.96045 485.8092 257.78955 495.57236 267.55264 c
505.33545 277.3158 521.16455 277.3158 530.92767 267.55264 c
f
1 J
1 j
0.60000002 i
0.573807 0.56553602 0 sc
1 0 0 -1 -358 412 cm
888.92767 144.44736 m
898.6908 154.21045 898.6908 170.03955 888.92767 179.80264 c
879.16455 189.5658 863.33545 189.5658 853.57233 179.80264 c
843.8092 170.03955 843.8092 154.21045 853.57233 144.44736 c
863.33545 134.6842 879.16455 134.6842 888.92767 144.44736 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
862.25 167.125 m
(!)s
/Cs1 SC
0.75 1 0.75 sc
CM
472.25 164.375 m
554.25 164.375 l
559.22058 164.375 563.25 160.34557 563.25 155.375 c
563.25 123.375 l
563.25 118.40443 559.22058 114.375 554.25 114.375 c
472.25 114.375 l
467.27945 114.375 463.25 118.40443 463.25 123.375 c
463.25 155.375 l
463.25 160.34557 467.27945 164.375 472.25 164.375 c
h
472.25 164.375 m
f
0.60000002 i
0.137255 0.36862701 0 sc
1 0 0 -1 -358 412 cm
830.25 247.625 m
912.25 247.625 l
917.22058 247.625 921.25 251.65443 921.25 256.625 c
921.25 288.625 l
921.25 293.59555 917.22058 297.625 912.25 297.625 c
830.25 297.625 l
825.27942 297.625 821.25 293.59555 821.25 288.625 c
821.25 256.625 l
821.25 251.65443 825.27942 247.625 830.25 247.625 c
h
830.25 247.625 m
S
/Cs2 SC
0 sc
0 i
838.25 277.625 m
(""""""#)[ 4.000000 4.000000 4.000000 4.000000 4.000000 4.000000 0.000000 ] xS
/Cs1 SC
1 0.75 0.75 sc
CM
530.92767 44.48122 m
540.6908 34.718121 540.6908 18.889021 530.92767 9.1259212 c
521.16455 -0.63722855 505.33545 -0.63722855 495.57236 9.1259212 c
485.8092 18.889021 485.8092 34.718121 495.57236 44.48122 c
505.33545 54.244373 521.16455 54.244373 530.92767 44.48122 c
f
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -358 412 cm
888.92767 367.51877 m
898.6908 377.28189 898.6908 393.11099 888.92767 402.87408 c
879.16455 412.63724 863.33545 412.63724 853.57233 402.87408 c
843.8092 393.11099 843.8092 377.28189 853.57233 367.51877 c
863.33545 357.75562 879.16455 357.75562 888.92767 367.51877 c
S
/Cs2 SC
0 sc
0 i
862.25 390.19644 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
871.25 360.19641 m
871.25 307.52499 l
S
0 i
CM
513.25 112.475 m
510.25 104.475 l
516.25 104.475 l
h
513.25 112.475 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
871.25 299.52499 m
868.25 307.52499 l
874.25 307.52499 l
h
871.25 299.52499 m
S
1 J
1 j
0.60000002 i
871.25 247.625 m
871.25 197.02501 l
S
0 i
CM
513.25 222.97499 m
510.25 214.97499 l
516.25 214.97499 l
h
513.25 222.97499 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
871.25 189.02501 m
868.25 197.02501 l
874.25 197.02501 l
h
871.25 189.02501 m
S
/Cs2 SC
0 sc
/F1.1[ 10 0 0 -10 0 0]sf
870.435 173.125 m
(&\)\()[ 3.170000 6.660000 0.000000 ] xS
870.63501 283.875 m
(&\)\()[ 3.170000 6.660000 0.000000 ] xS
870.435 395.625 m
(&\)\()[ 3.170000 6.660000 0.000000 ] xS
/Cs1 SC
0.75 1 0.75 sc
CM
222.5 191.83928 m
414.5 191.83928 l
419.47055 191.83928 423.5 187.80984 423.5 182.83928 c
423.5 94.839287 l
423.5 89.868721 419.47055 85.839287 414.5 85.839287 c
222.5 85.839287 l
217.52943 85.839287 213.5 89.868721 213.5 94.839287 c
213.5 182.83928 l
213.5 187.80984 217.52943 191.83928 222.5 191.83928 c
h
222.5 191.83928 m
f
1 J
1 j
0.60000002 i
0.137255 0.36862701 0 sc
1 0 0 -1 -358 412 cm
580.5 220.16072 m
772.5 220.16072 l
777.47058 220.16072 781.5 224.19016 781.5 229.16072 c
781.5 317.16071 l
781.5 322.13129 777.47058 326.16071 772.5 326.16071 c
580.5 326.16071 l
575.52942 326.16071 571.5 322.13129 571.5 317.16071 c
571.5 229.16072 l
571.5 224.19016 575.52942 220.16072 580.5 220.16072 c
h
580.5 220.16072 m
S
0 0 0 sc
535.875 273.16071 m
553.22498 273.16071 l
S
0 i
CM
203.22501 138.83928 m
195.22501 141.83928 l
195.22501 135.83928 l
h
203.22501 138.83928 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
561.22498 273.16071 m
553.22498 270.16071 l
553.22498 276.16071 l
h
561.22498 273.16071 m
S
1 J
1 j
0.60000002 i
391.375 273.16071 m
408.72501 273.16071 l
S
0 i
CM
58.724998 138.83928 m
50.724998 141.83928 l
50.724998 135.83928 l
h
58.724998 138.83928 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
416.72501 273.16071 m
408.72501 270.16071 l
408.72501 276.16071 l
h
416.72501 273.16071 m
S
/Cs2 SC
0 sc
/F1.1[ 16 0 0 -16 0 0]sf
575.60004 214.5 m
(*+,-,."/01)[ 11.328000 9.152000 4.032000 9.296000 4.032000 8.544000 4.000000 12.464000 9.584000 0.000000 ] xS
/Cs1 SC
1 0.75 0.75 sc
CM
248.17764 44.10622 m
257.9408 34.343121 257.9408 18.514021 248.17764 8.7509212 c
238.41455 -1.0122286 222.58545 -1.0122286 212.82236 8.7509212 c
203.0592 18.514021 203.0592 34.343121 212.82236 44.10622 c
222.58545 53.869373 238.41455 53.869373 248.17764 44.10622 c
f
1 J
1 j
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -358 412 cm
606.17767 367.89377 m
615.9408 377.65689 615.9408 393.48599 606.17767 403.24908 c
596.41455 413.01224 580.58545 413.01224 570.82233 403.24908 c
561.0592 393.48599 561.0592 377.65689 570.82233 367.89377 c
580.58545 358.13062 596.41455 358.13062 606.17767 367.89377 c
S
/Cs2 SC
0 sc
0 i
584.62799 390.57144 m
($)s
/F1.1[ 10 0 0 -10 0 0]sf
593.91498 395 m
(&)s
/Cs1 SC
1 1 0.75 sc
CM
418.17764 267.17764 m
427.9408 257.41455 427.9408 241.58545 418.17764 231.82236 c
408.41455 222.0592 392.58545 222.0592 382.82236 231.82236 c
373.0592 241.58545 373.0592 257.41455 382.82236 267.17764 c
392.58545 276.9408 408.41455 276.9408 418.17764 267.17764 c
f
0.60000002 i
0.573807 0.56553602 0 sc
1 0 0 -1 -358 412 cm
776.17767 144.82236 m
785.9408 154.58545 785.9408 170.41455 776.17767 180.17764 c
766.41455 189.9408 750.58545 189.9408 740.82233 180.17764 c
731.0592 170.41455 731.0592 154.58545 740.82233 144.82236 c
750.58545 135.0592 766.41455 135.0592 776.17767 144.82236 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
754.59601 167.5 m
(!)s
/F1.1[ 10 0 0 -10 0 0]sf
762.91498 173.5 m
(&)s
0.60000002 i
/Cs1 SC
0 0 0 sc
759 220 m
759 196.89999 l
S
0 i
CM
401 223.10001 m
398 215.10001 l
404 215.10001 l
h
401 223.10001 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
759 188.89999 m
756 196.89999 l
762 196.89999 l
h
759 188.89999 m
S
1 J
1 j
0.60000002 i
787.875 272.66071 m
805.22498 272.66071 l
S
0 i
CM
455.22501 139.33928 m
447.22501 142.33928 l
447.22501 136.33928 l
h
455.22501 139.33928 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
813.22498 272.66071 m
805.22498 269.66071 l
805.22498 275.66071 l
h
813.22498 272.66071 m
S
1 J
1 j
0.60000002 i
588.5 361.16071 m
588.5 336.0607 l
S
0 i
CM
230.5 83.939285 m
227.5 75.939285 l
233.5 75.939285 l
h
230.5 83.939285 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
588.5 328.0607 m
585.5 336.0607 l
591.5 336.0607 l
h
588.5 328.0607 m
S
1 J
1 j
0.60000002 i
535.125 236.26785 m
803.97498 236.26785 l
S
0 i
CM
453.97501 175.73215 m
445.97501 178.73215 l
445.97501 172.73215 l
h
453.97501 175.73215 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
811.97498 236.26785 m
803.97498 233.26785 l
803.97498 239.26785 l
h
811.97498 236.26785 m
S
/Cs2 SC
0 sc
/F1.1[ 16 0 0 -16 0 0]sf
533.961 226.82143 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
543.97748 231.82143 m
(&'\()[ 3.170000 3.200000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
785.836 226.82143 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
795.85248 231.82143 m
(&)s
/F1.1[ 16 0 0 -16 0 0]sf
742.336 208.5 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
752.85248 213.5 m
(&)s
/F1.1[ 16 0 0 -16 0 0]sf
572.19049 348.82144 m
($)s
/F1.1[ 10 0 0 -10 0 0]sf
581.91498 353.82144 m
(&)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
759.05859 310 m
759 219 l
S
0 i
0.75 0.75 1 sc
CM
361.19974 180.34261 m
363.93341 177.60893 363.93341 173.17679 361.19974 170.44312 c
358.46606 167.70943 354.03394 167.70943 351.30026 170.44312 c
348.56659 173.17679 348.56659 177.60893 351.30026 180.34261 c
354.03394 183.07628 358.46606 183.07628 361.19974 180.34261 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -358 412 cm
719.19977 231.65739 m
721.93341 234.39107 721.93341 238.82321 719.19977 241.55688 c
716.46606 244.29057 712.03394 244.29057 709.30023 241.55688 c
706.56659 238.82321 706.56659 234.39107 709.30023 231.65739 c
712.03394 228.92372 716.46606 228.92372 719.19977 231.65739 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 9 0 0 -9 0 0]sf
711.32953 239.60715 m
(2)s
/Cs1 SC
0.75 0.75 1 sc
CM
406.14114 180.34261 m
408.87482 177.60893 408.87482 173.17679 406.14114 170.44312 c
403.40747 167.70943 398.97534 167.70943 396.24167 170.44312 c
393.508 173.17679 393.508 177.60893 396.24167 180.34261 c
398.97534 183.07628 403.40747 183.07628 406.14114 180.34261 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -358 412 cm
764.14117 231.65739 m
766.87482 234.39107 766.87482 238.82321 764.14117 241.55688 c
761.40747 244.29057 756.97534 244.29057 754.24164 241.55688 c
751.508 238.82321 751.508 234.39107 754.24164 231.65739 c
756.97534 228.92372 761.40747 228.92372 764.14117 231.65739 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
754.52942 241 m
(\))s
/F1.1[ 16 0 0 -16 0 0]sf
696.99524 274.53571 m
(3)s
/F1.1[ 10 0 0 -10 0 0]sf
705.38373 278.53571 m
(&)s
0.60000002 i
/Cs1 SC
0 0 0 sc
588.5 326 m
588.5 318 l
759 318 l
759 297 l
S
0 i
1 0.75 1 sc
CM
386.875 121.5 m
414.125 121.5 l
414.125 104 l
386.875 104 l
h
386.875 121.5 m
f
0.60000002 i
0.192157 0 0.40392199 sc
1 0 0 -1 -358 412 cm
744.875 290.5 m
772.125 290.5 l
772.125 308 l
744.875 308 l
h
744.875 290.5 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 13 0 0 -13 0 0]sf
745.40253 303.25 m
(&.4#)[ 4.121000 6.942000 7.553000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
715 276.5 m
741.09998 276.5 l
S
0 i
CM
391.10001 135.5 m
383.10001 138.5 l
383.10001 132.5 l
h
391.10001 135.5 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
749.09998 276.5 m
741.09998 273.5 l
741.09998 279.5 l
h
749.09998 276.5 m
S
0.75 0.75 1 sc
CM
405.44974 141.44974 m
408.18341 138.71608 408.18341 134.28392 405.44974 131.55026 c
402.71606 128.81657 398.28394 128.81657 395.55026 131.55026 c
392.81659 134.28392 392.81659 138.71608 395.55026 141.44974 c
398.28394 144.18343 402.71606 144.18343 405.44974 141.44974 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -358 412 cm
763.44977 270.55026 m
766.18341 273.28394 766.18341 277.71606 763.44977 280.44974 c
760.71606 283.18341 756.28394 283.18341 753.55023 280.44974 c
750.81659 277.71606 750.81659 273.28394 753.55023 270.55026 c
756.28394 267.81659 760.71606 267.81659 763.44977 270.55026 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 9 0 0 -9 0 0]sf
755.57953 278.5 m
(2)s
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
607.5 237 m
607.5 304.875 l
S
0 0 0 sc
645.5 236.5 m
645.5 308.10001 l
S
0 i
CM
287.5 95.900002 m
290.5 103.9 l
284.5 103.9 l
h
287.5 95.900002 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
645.5 316.10001 m
648.5 308.10001 l
642.5 308.10001 l
h
645.5 316.10001 m
S
0.75 0.75 1 sc
CM
292.44974 151.44974 m
295.18341 148.71608 295.18341 144.28392 292.44974 141.55026 c
289.71606 138.81657 285.28394 138.81657 282.55026 141.55026 c
279.81659 144.28392 279.81659 148.71608 282.55026 151.44974 c
285.28394 154.18343 289.71606 154.18343 292.44974 151.44974 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -358 412 cm
650.44977 260.55026 m
653.18341 263.28394 653.18341 267.71606 650.44977 270.44974 c
647.71606 273.18341 643.28394 273.18341 640.55023 270.44974 c
637.81659 267.71606 637.81659 263.28394 640.55023 260.55026 c
643.28394 257.81659 647.71606 257.81659 650.44977 260.55026 c
S
/Cs2 SC
0 sc
0 i
642.57953 268.5 m
(2)s
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
676.5 305 m
676.5 265.5 l
662.40002 265.5 l
S
0 i
CM
296.39999 146.5 m
304.39999 143.5 l
304.39999 149.5 l
h
296.39999 146.5 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
654.40002 265.5 m
662.40002 268.5 l
662.40002 262.5 l
h
654.40002 265.5 m
S
1 0.75 1 sc
CM
303.875 130.875 m
331.125 130.875 l
331.125 113.375 l
303.875 113.375 l
h
303.875 130.875 m
f
1 J
1 j
0.60000002 i
0.192157 0 0.40392199 sc
1 0 0 -1 -358 412 cm
661.875 281.125 m
689.125 281.125 l
689.125 298.625 l
661.875 298.625 l
h
661.875 281.125 m
S
0 0 0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
670.41998 295.375 m
(5)s
0.60000002 i
588.5 317 m
588.5 305.5 l
677 305.5 l
714.5 305 l
714.5 253.22144 l
S
0 i
CM
356.5 166.77856 m
353.5 158.77856 l
359.5 158.77856 l
h
356.5 166.77856 m
f
0 J
0 j
1 0 0 -1 -358 412 cm
714.5 245.22144 m
711.5 253.22144 l
717.5 253.22144 l
h
714.5 245.22144 m
S
1 J
1 j
0.60000002 i
0.69411802 0 0.109804 sc
607.5 305.5 m
676.5 305.5 l
S
0 i
1 0.75 1 sc
CM
342.625 130.875 m
369.875 130.875 l
369.875 113.375 l
342.625 113.375 l
h
342.625 130.875 m
f
0.60000002 i
0.192157 0 0.40392199 sc
1 0 0 -1 -358 412 cm
700.625 281.125 m
727.875 281.125 l
727.875 298.625 l
700.625 298.625 l
h
700.625 281.125 m
S
0 0 0 sc
0 i
709.16998 295.375 m
(5)s
/Cs2 SC
0 sc
664.99109 258.5 m
(6)s
/Cs1 SC
0.75 0.75 1 sc
CM
361.44974 152.44974 m
364.18341 149.71608 364.18341 145.28392 361.44974 142.55026 c
358.71606 139.81657 354.28394 139.81657 351.55026 142.55026 c
348.81659 145.28392 348.81659 149.71608 351.55026 152.44974 c
354.28394 155.18343 358.71606 155.18343 361.44974 152.44974 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -358 412 cm
719.44977 259.55026 m
722.18341 262.28394 722.18341 266.71606 719.44977 269.44974 c
716.71606 272.18341 712.28394 272.18341 709.55023 269.44974 c
706.81659 266.71606 706.81659 262.28394 709.55023 259.55026 c
712.28394 256.81659 716.71606 256.81659 719.44977 259.55026 c
S
/Cs2 SC
0 sc
0 i
/F1.1[ 9 0 0 -9 0 0]sf
710.45001 267.5 m
(\(')[ 5.220000 0.000000 ] xS
/F1.1[ 10 0 0 -10 0 0]sf
669.72357 261.5 m
(&)s
/F1.1[ 16 0 0 -16 0 0]sf
767.2735 285 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
776.28998 289 m
(&)s
768.35748 273.5 m
(7)s
ep
end
%%Trailer
%%EOF
